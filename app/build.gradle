apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.espy.mps"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 3
        versionName "2.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled false
            project.ext.set("archivesBaseName", applicationName + "_v" + defaultConfig.versionName + "_" + getDate())
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            project.ext.set("archivesBaseName", applicationName + "_v" + defaultConfig.versionName + "_" + getDate())
            versionNameSuffix "-debug"
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    flavorDimensions "default"

    productFlavors {
        production {
            dimension "default"

            buildConfigField "boolean", "IS_LOG_ENABLED", "false"
        }

        staging {
            dimension "default"

            buildConfigField "boolean", "IS_LOG_ENABLED", "true"
        }
    }
}

def getDate() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'

    /* androidx dependencies*/
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

    /* butterknife dependencies*/
    implementation 'com.jakewharton:butterknife:10.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    /* google play dependencies*/
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    /* firebase dependencies*/
    implementation 'com.google.firebase:firebase-messaging:17.3.4'

    /*Retrofit & RxJava dependencies*/
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.google.code.gson:gson:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation "io.reactivex.rxjava2:rxjava:2.1.8"

    /* Other dependencies*/
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    implementation 'com.kaopiz:kprogresshud:1.2.0'
//    implementation files('./libs/fusedlocationapi-release.aar')
    implementation files('./libs/fusedlocationapi.aar')

    /* Glide dependencies*/
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }
}
